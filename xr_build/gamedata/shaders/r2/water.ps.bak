#include "common.h"

struct   vf
{
	float4 	hpos	: 	POSITION	;
   	float2  tbase	:   	TEXCOORD0	;  // base
   	float2 	tnorm0	:	TEXCOORD1	;  // nm0
   	float2 	tnorm1	:	TEXCOORD2	;  // nm1
	half3 	M1	:	TEXCOORD3	;
	half3 	M2	:	TEXCOORD4	;
	half3 	M3	:	TEXCOORD5	;
	half3	v2point	:	TEXCOORD6	;
   	half4	c0	:  	COLOR0		;
//	float  	fog	: 	FOG		;
};

uniform	sampler2D		s_nmap;
uniform	samplerCUBE		s_env0;
uniform	samplerCUBE		s_env1;

half4   main 	( vf I )  	: COLOR
{
	half4	base 		= tex2D   	(s_base,I.tbase);
	half3	n0		= tex2D   	(s_nmap,I.tnorm0);
	half3	n1		= tex2D   	(s_nmap,I.tnorm1);
	half3	Navg		= n0 + n1 - 1	;

	half3 	Nw     		= mul          	(half3x3(I.M1, I.M2, I.M3), Navg);
		Nw		= normalize	(Nw);
	half3 	v2point		= normalize	(I.v2point);
	half3	vreflect	= reflect	(v2point, Nw)	;

//		if (vreflect.y>0)	{
//			vreflect.xyz	/=	vreflect.y	;
//			
//		}
		vreflect.y	= vreflect.y*2-1;		// fake remapping

	half3	env0		= texCUBE  	(s_env0, vreflect);
	half3	env1		= texCUBE  	(s_env1, vreflect);
	half3 	env 		= lerp		(env0,env1,L_ambient.w);

	half  	fresnel	= saturate	(dot(vreflect,v2point));
	half 	amount	= 0.15h+0.25h*pow	(fresnel,9);			// 1=full env, 0=no env

	half3	c_reflection	= env*amount	;
	half3	final		= lerp(c_reflection,base.rgb,base.a)	;

	// tonemap
#ifdef	USE_VTF
//		final		*= I.c0.w	;
#else
//	 	final	 	*= tex2D	(s_tonemap,I.tbase).x	;	// any TC - OK
#endif

	// out
  	return  half4   (final, 1 )		;
}
